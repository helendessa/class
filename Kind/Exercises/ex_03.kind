// Basic Exercises involving Nats

type Nat {
  zero
  succ(pred: Nat)
}

// 01) Increment
// 2 + 1 = 3
// 0 + 1 = 1
inc(a: Nat): Nat  
  case a{
    Nat.succ(a) //succ a, if a = 1, succ(1) = 1 + 1 = 2 etc
  }

// 02) Decrement
// 2 - 1 = 1
// 0 - 1 = 0 -> Nat = {0, 1, 2...}, 0 - 1 = -1, it doesn't exist in Nat
dec(a: Nat): Nat
  case a{
    zero: Nat.zero
    succ: a.pred // pred a, if a = 1, a.pred = 1 - 1 = 2 etc
  }

is_zero(a: Nat): Bool //if zero = true, else = false
  case a{
    zero: Bool.true
    succ: Bool.false
  }
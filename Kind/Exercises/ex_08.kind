// Basic exercises involving Lists

type List <A: Type> {
  nil
  cons(head: A, tail: List<A>)
}

// 01) Returns the head of the List
head<A: Type>(xs: List<A>): Maybe<A>
  case xs{
    nil: none
    cons: some(xs.head) // just showing what some is holding (head)
  }

// 02) Returns the list without the first element
tail<A: Type>(xs: List<A>): List<A>
  case xs{ // just definition of nil and tail
    nil: List.nil<A>
    cons: xs.tail
  }
//                  case xs
//                /         \
//              nil         cons(head, tail)
//               |                 |
//         List.nil<A>            xs.tail
//
// 03) Returns the length of a list
length<A: Type>(xs: List<A>): Nat
  case xs {
    nil: 0 //nat
    cons: Nat.succ(length<A>(xs.tail))
  }
// what's happening here?
// List.cons<Nat>(1, List.cons<Nat>(2, List.cons<Nat>(3, List.nil<Nat>)))
// length<Nat>
// case cons: take tail without the fist element (xs.tail)
// length<Nat>(1, List.cons<Nat>(2, List.cons<Nat>(3, List.nil<Nat>)))
//           [1st]
// 1st element -> Nat.succ
// (Nat.succ(length<Nat>(List.cons<Nat>(2, List.cons<Nat>(3, List.nil<Nat>)))) 
// cas cons:
// 1st element -> Nat.succ
// (Nat.succ(Nat.succ(length<Nat>(List.cons<Nat>(3, List.nil<Nat>)))))
// cas cons:
// (Nat.succ(Nat.succ(Nat.succ(length<Nat>(List.nil<Nat>)))))
// case nil:
// (Nat.succ(Nat.succ(Nat.succ(Nat.zero)))) = 3

// 04) Returns the last element of a list
last<A: Type>(xs: List<A>): Maybe<A> // returns >>MAYBE<<
  case xs {
    nil: none // if empty, then returns none
    cons: case xs.tail{ // if there's element
      nil: some(xs.head) // tail? no, then this is the end
      cons: last<A>(xs.tail) // tail? yes, then do it again
    }
  }
// xs
// nil: empty
// cons: xs.tail ,,, if there's elements, analyze the next one
//  nil: some(xs.head) // if there's no more elements, the last one is the first one, the head
//  cons: last<A>(xs.tail) // if there's more elements, analyze the rest, until there's no more

// 05) Returns the list without the last element
init<A: Type>(xs: List<A>): List<A>
  case xs {
    nil: List.nil<A>
    cons: case xs.tail {
      nil: List.nil<A>
      cons: List.cons<A>(xs.head, init<A>(xs.tail))
    }
  }
// not used
// [1, 2, 3]
// head
// [3, 2, 1] // question 10... solve 10 first then 05 to use it here
// head
// then applies function of 02 question
// used this one
// nil: nil
// cons: analyze tail
//  nil: nil (just have head, drop the tail and there's nothing more)
//  cons: 
// init last
// tail: list without the first element (head)
// init: list without all elements, except the last one (last)
// [1, 2, 3, 4, 5,  6  ]
// |    init     ||last|

// 06) Concatenates two lists
concat<A: Type>(xs: List<A>, ys: List<A>): List<A>
  case xs {
    nil: ys
    cons: List.cons<A>(xs.head, concat<A>(xs.tail, ys)) // ..[]..[  ][][  ]
  }

// 07) Removes n elements from the start of the list
// List.drop<Nat>(3, [1,2,3,4,5]) -> [4, 5]
drop<A: Type>(n: Nat, xs: List<A>): List<A>
  case n {
    zero: xs
    succ: case xs{ // if n > 0, then remove n, analyze the list now:
      nil: List.nil<A> // if nil, there's nothing to drop...
      cons: drop<A>(n.pred, xs.tail) // pred n until 0 (nat)
    }
  }

// 08) Creates a new list with the N first elements of the previous list
// List.take<Nat>(3, [1,2,3,4,5]) -> [1,2,3] <<<<<<<<<<<<<<
take<A: Type>(n: Nat, xs: List<A>): List<A>
  case n {
    zero: List.nil<A>
    succ: case xs {
      nil: List.nil<A>
      cons: List.cons<A>(xs.head, take<A>(n.pred, xs.tail))
    }
  }
// N first: head + (n-1) // need to take n-1 from tail

// 09) Applies a function to all elements of a list
map<A: Type, B: Type>(fn: A -> B, xs: List<A>): List<B>
  case xs {
    nil: List.nil<B>
    cons: List.cons<B>(fn(xs.head), map<A,B>(fn, xs.tail)) //applies to head + tail
  }

// 10) Returns the same list, with the order reversed
reverse<A: Type>(xs: List<A>): List<A>
  reverse.go<A>(List.nil<A>, xs)

reverse.go<A: Type>(new_list: List<A>, old_list: List<A>): List<A>
  case old_list {
    nil: List.nil<A>
    cons: reverse.go<A>(List.cons<A>(old_list.head, new_list), old_list.tail)
  }

// [1, 2, 3, 4, 5]
// [1] , [2, 3, 4, 5]
// [2] , [3, 4, 5] // [2, 1], [3, 4, 5]
// [2, 1], [3, 4, 5]
// [3] , [4, 5] // [3, 2, 1] , [4, 5]
// [3, 2, 1] , [4, 5]
// [4], [5] // [4, 3, 2, 1] , [5]
// [5]
// [ ] [5] // [] [5, 4, 3, 2, 1]
// head nil: [] [5, 4, 3, 2, 1] (List.nil<A>)

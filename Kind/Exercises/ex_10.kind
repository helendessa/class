//Char and String

// Charactere Type
// Alias for U16
Char: Type
  U16


//Syntax Sugar for U16
  //0#16, 1#16, 2#16 ...


//Syntax Sugar for Char
  //'0', '1', '2' ... 

//Ascii Table from Wikipedia:
// https://upload.wikimedia.org/wikipedia/commons/1/1b/ASCII-Table-wide.svg

//  _________________________________________
// | U16 Syntax Sugar   | Char Syntax Sugar  |  
// |--------------------|--------------------|
// |     72#16          |      'H'           |
// |    101#16          |      'e'           |
// |    121#16          |      'y'           |
//  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

// 01) Verifies if the character is Upper Case

//is_upper('a') -> Bool.false
//is_upper('A') -> Bool.true
//is_upper('0') -> Bool.false
is_upper(x: Char): Bool // upper case = 65 < x < 90
  case U16.lte(x, 90) {
    false: Bool.true
    true:
      case U16.gte(x, 65)
        true: Bool.true
        false: Bool.false
  }

// 02) Verifies if the character is Lower Case

//is_lower('a') -> Bool.true
//is_lower('A') -> Bool.false
//is_lower('0') -> Bool.false
is_lower(x: Char): Bool
  case U16.gte(x, 97) {// lower case = 97 < x < 102
    false: Bool.false
    true:
      case U16.lte(x, 122)
        true: Bool.true
        false: Bool.false
  }

// 03) Verifies if the character is a Number-Digit Value

//is_digit('a') -> Bool.false
//is_digit('A') -> Bool.false
//is_digit('0') -> Bool.true
is_digit(x: Char): Bool
  case U16.gte(x, 48) { // number-digit = 48 < x < 57
    false: Bool.false
    true:
      case U16.lte(x, 57)
        true: Bool.true
        false: Bool.false
  }


// 04) Verifies if both of the Characters are the same

//is_equal('a', 'A') -> Bool.false
//is_equal('A', '0') -> Bool.false
//is_equal('0', '0') -> Bool.true
equal(x: Char, y: Char): Bool
  U16.eql(x, y)

// just using U16
//U16.eql(a: U16, b: U16): Bool
//  open a
//  open b
//  Word.eql!(a.value, b.value)


// 05) Transforms Characters into Nat digits // ...??? looks weird

//to_digit('0') -> Nat.zero
//to_digit('1') -> Nat.succ(Nat.zero)
//to_digit('4') -> 4
to_digit(x: Char): Nat
  case U16.to_digit(x){
    '0': Nat.zero
    '1': Nat.succ(Nat.zero)
    '2': Nat.succ(Nat.succ(Nat.zero))
    '3': Nat.succ(Nat.succ(Nat.succ(Nat.zero)))
    '4': Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero))))
    '5': Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero)))))
    '6': Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero))))))
    '7': Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero)))))))
    '8': Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero))))))))
    '9': Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero)))))))))
  }

// 06) Transforms all Characters into Lower Case Characters

//to_lower('A') -> 'a'
//to_lower('B') -> 'b'
//to_lower('Z') -> 'z'
to_lower(x: Char): Char
  case U16.is_lower(x) {
    true: x 
    false: U16.sub(x, 32) // transformation upper to lower case
  }

// 07) Transforms all Characters into Upper Case Characters

//to_upper('a') -> 'A' 
//to_upper('b') -> 'B'
//to_upper('z') -> 'Z'
to_upper(x: Char): Char
  case U16.is_upper(x) {
    true: x
    false: U16.add(x, 32) // transformation lower to upper case
  }

//String Type
type String { 
  nil,
  cons(head: Char, tail: String)
}

//Without Syntax Sugar for String
//a = String.cons('H', String.cons('I', String.nil))
//b = String.cons('H', String.cons('e', String.cons('l', String.cons('l', String.cons('o', String.nil)))))
//c = String.cons('t', String.cons('e', String.cons('x', String.cons('t', String.nil))))

//Syntax Sugar for String
//a = "HI"
//b = "Hello"
//c = "text"



// 08) Concatenates two Strings into one

//concat(a,b) -> "HiHello"
//concat(b,c) -> "Hellotext"
concat(xs: String, ys: String): String
  case xs {
    nil: case ys {
      nil: String.nil
      cons: ys
    }
    cons: case ys {
      nil: xs  //      | head | |     new tail     |    
      cons: String.cons(xs.head, concat(xs.tail, ys))
    }
  }

// nil nil = nil
// nil cons = cons
// cons nil = cons
// cons cons = head xs + tail xs + ys


// 09) Applies a Function to all Characters of the String // *** very useful...***

//map(to_lower, a) -> "hi"
map(fn: Char -> Char, xs: String): String
  case xs {
    nil: String.nil
    cons: String.cons(fn(xs.head), map(fn, xs.tail))
  }

// cons(head: A, tail: List<A>) // fn(head), map() map(fn -> tail)

// 10) Converts all Lower Case Caracters in a String to Upper Case

//string_to_upper(c) -> "TEXT"
string_to_upper(xs: String): String
  map(to_upper, xs) // super simple using map function... but let's try another way

//respost 02: // just a repeat of map function... so map can be used like said above
  case xs {
    nil: String.nil
    cons: String.cons(to_upper(xs.head), string_to_upper(xs.tail))
  }

// 11) Convers the String into bits

//to_bits(a) -> "0000000001001001 0000000001001000"
//to_bits(b) -> "0000000001101111 0000000001101100 00000000011011000 000000001100101 0000000001001000"
//to_bits(c) -> "0000000001110100 0000000001111000 00000000011001010 000000001110100"
to_bits(xs: String): Bits
  case xs {
    nil: Bits.e // empty string: empty bits
    cons: Bits.concat(U16.to_bits(str.head), to_bits(str.tail))
  }
// U16 to bits -> head -> bits
// concat with ... repeat to bits -> head -> bits

// 12) Verifies if two Strings are Equal // eql

//stringequal(a, a) -> Bool.true
//stringequal(a, b) -> Bool.false
//stringequal(b, c) -> Bool.false
stringequal(xs: String, ys: String): Bool
  case xs ys {
    nil nil: Bool.true
    nil cons: Bool.false
    cons nil: Bool.false
    cons cons: case U16.eql(xs.head, ys.head){
      true: stringequal(xs.tail, ys.tail) //head = head? ok, then verify the rest
      false: Bool.false
    } 
  }

// 13) Verifies if All String elements are Numbers // is_digit

//is_nat(a)      -> Bool.false
//is_nat(b)      -> Bool.false
//is_nat("1234") -> Bool.true
is_nat(xs: String): Bool
  case xs {
    nil: Bool.true // bc of recursion, needs to be true
    cons: case is_digit(xs.head) {
      true: is_nat(xs.tail) // will verify each head first, repeat the function until nil
      false: Bool.false                                                     // nil needs to be true
    }
  
    }
// nil: empty, no digit -> F
// cons: 
// head is digit?
// T: tail is digit? ((returns the same function... head is? [tail is?] head is?.....))
// F: F

// 14) Divides the elements of a String into a list, using a match you decide

//split(b, "l") -> ["He","" , "o"
//split(c, "e") -> ["t", "xt"]
split(xs: String, match: String): List<String>
  ?split



// 15) Takes any elements while the condition is matched.

//take_while(is_upper,    a) -> "HI"
//take_while(is_lower,    b) -> ""
//take_while(is_equal('t'), c) -> "t"
take_while(cond: Char -> Bool, xs: String): String
  case xs {
    nil: String.nil
    cons: case cond(xs.head){
      true: String.cons(xs.head, take_while(cond, xs.tail))
      false: String.nil
    }
  }

// nil: take ?? nil
// cons: analyze head
// T: take head and applie function to xs.tail
// F: nil

// 16) Finds the index of the head for the first occurence if any of the Characters are equal

//find(a, "H") -> 0
//find(b, "l") -> 2
//find(c, "x") -> 2
find(xs: String, x: Char): Nat
  case xs {
    nil: Nat.zero
    cons: case equal(xs.head, x){
      true: Nat.zero
      false: Nat.succ(find(xs.tail, x))
    }
  }
// cons: equal?
// T: 0
// F: +1 until T
// nil: 0

// 17) Filters the String and discards all the Chars that doesn't satisfy given condition 

//filter(is_upper,      a) -> "HI"
//filter(is_lower,      b) -> "ello"
//filter(is_equal('t'), c) -> "tt"
filter(cond: Char -> Bool, xs: String): String
  case xs { /// filter the string
    nil: String.nil // empty ?
    cons: case cond(xs.head){ // analyze head, the first string, satisfy given condition?
      true: String.cons(xs.head, filter(cond, xs.tail)) // T, then analyze tail, applies filter to the rest
      false: filter(cond, xs.tail) // F, filter
    }
  }

// 18) Concatenates all elements of a List of Strings

//flatten([a,b,c]) -> "HIHellotext"
flatten(lxs: List<String>): String
  case lxs {
    nil: List.nil<String>
    cons: concat(lxs.head, flatten(ls.tail)) // concat head/tail... head/tail... head/tail.. until nil
  }
//concat<A: Type>(xs: List<A>, ys: List<A>): List<A>
//  case xs {
//    nil: ys
//    cons: List.cons<A>(xs.head, concat<A>(xs.tail, ys)) // ..[]..[  ][][  ]
//  }

// 19) Drops a n Number of characteres from a String

//drop(1, a) -> "I"
//drop(2, b) -> "llo"
//drop(3, c) -> "t"
drop(n: Nat, xs: String): String
  case n { // drop n number of char .. .
    zero: xs // xs - 0 char = xs
    succ: case xs { // if n > 0
      nil: String.nil // if string nil, nothing to drop
      cons: drop(n.pred, xs.tail) // if string cons, n-1 until 0
    }
  }

// 20) Takes n elements of a String

//take(1, a) ->  "H"
//take(2, b) ->  "He"
//take(3, c) ->  "tex"
take(n: Nat xs: String): String
  case n{
    zero: String.nil // takes nothing, returns nil
    succ: case xs {
      nil: String.nil // takes nothing, returns nil
      cons: String.cons(xs.head, take(n.pred, xs.tail)) //1st take head, then applies the functin again
    }
  }

// 21) ((Takes)) a x part of the string after a n Index of values get ((dropped))

//slice(1, 2, a) -> "I"
//slice(2, 4, b) -> "ll"
//slice(1, 3, c) -> "ex"
slice(n: Nat, x: Nat, xs: String): String
  drop(n, take(x, xs))

// take = Takes n elements of a String (((Takes)) a x part of the string)
// drop = Drops a n Number of characteres from a String (n Index of values get ((dropped)))
// 1st = drop, 2nd = take
// drop after take drop (n, take)
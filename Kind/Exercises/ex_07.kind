//Bits

//File for exercises in Bits

// important: pred/succ in  bits = structure, not +1 -1

//e = empty
//o = 0
//i = 1
type Bits { 
  e // stop
  o(pred: Bits)
  i(pred: Bits)
}

//a = Bits.i(Bits.i(Bits.e))
//b = Bits.o(Bits.i(Bits.i(Bits.e)))
//c = Bits.o(Bits.o(Bits.i(Bits.i(Bits.e))))
//d = Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))


// 01) Verifies if it is an Empty Bit

//is_empty(a)      -> Bool.false---\  
//is_empty(b)      -> Bool.false    \ default false
//is_empty(c)      -> Bool.false    /
//is_empty(d)      -> Bool.false---/
//is_empty(Bits.e) -> Bool.true
is_empty(b: Bits): Bool
  case b{
    e: Bool.true
    o: Bool.false
    i: Bool.false
  }

//with default, but be careful
is_empty(b: Bits): Bool
  case b{
    e: Bool.true 
  } default Bool.false


// 02) Gets the Tail of a Bits structure // important definition

//tail(a) -> Bits.i(Bits.e)
//tail(b) -> Bits.i(Bits.i(Bits.e))
//tail(c) -> Bits.o(Bits.i(Bits.i(Bits.e)))
//tail(d) -> Bits.i(Bits.i(Bits.i(Bits.e)))
tail(b: Bits): Bits
  case b{
    e: Bits.e
    o: b.pred
    i: b.pred
  }

// 0110
// b.pred -> 110

// 03) Negates all Bits

//not(a) -> Bits.o(Bits.o(Bits.e))
//not(b) -> Bits.i(Bits.o(Bits.o(Bits.e)))
//not(c) -> Bits.i(Bits.i(Bits.o(Bits.o(Bits.e))))
//not(d) -> Bits.o(Bits.o(Bits.o(Bits.o(Bits.e))))
not(b: Bits): Bits
  case b{ // o -> i   i->o
    e: Bits.e
    o: Bits.i(notb(pred.b)) //neg the fist, do recursion with the rest...
    i: Bits.o(notb(pred.b))
  }

// 04) Increments a Bit

//inc(a) -> Bits.o(Bits.o(Bits.i(Bits.e)))
//inc(b) -> Bits.i(Bits.i(Bits.i(Bits.e)))
//inc(c) -> Bits.i(Bits.o(Bits.i(Bits.i(Bits.e))))
//inc(d) -> Bits.o(Bits.o(Bits.o(Bits.o(Bits.i(Bits.e)))))
inc(b: Bits): Bits
  case b{
    e: Bits.e
    o: Bits.i(b.pred)
    i: Bits.o(inc(b.pred)) //same as dec but inverse
  }


//    1        2       4       8       16

// i:
//    1        1       1       0        0 --> 7
//    0        1       1       0        0 --> 8 = 7 + 1 (pos-inc)

// o:
//    0        0       0       1        0 --> 8
//    0        0       0       1        0 --> 9 = 8 + 1 (pos-inc)



// 05) Decrements a Bit

//dec(a) -> Bits.o(Bits.i(Bits.e))
//dec(b) -> Bits.i(Bits.o(Bits.i(Bits.e)))
//dec(c) -> Bits.i(Bits.i(Bits.o(Bits.i(Bits.e))))
//dec(d) -> Bits.o(Bits.i(Bits.i(Bits.i(Bits.e))))
dec(b: Bits): Bits
  case b{
    e: Bits.e
    o: Bits.i(dec(b.pred)) //
    i: Bits.o(b.pred)
  // i->o(the rest of b remains the same) 
  //7: 1(110) -> 0(110)
  //     b.pred    b.pred
  }

//    1        2       4       8       16

// i:
//    1        1       1       0        0 --> 7
//    0        1       1       0        0 --> 6 = 7 - 1 (decrement)

//    1        0       0       1        0 --> 9
//    0        0       0       1        0 --> 8 = 9 - 1 (decrement)

// o:
//    0        0       0       1        0 --> 8
//    1        1       1       0        0 --> 7 = 8 - 1 (decrement)

//Nat.succ(Nat.succ(Nat.zero))
//b.pred = Bits.i(Bits.i(Bits.i(Bits.e)))
//

// 06) Concatenate two Bits structures

//concat(a,b) -> Bits.i(Bits.i(Bits.o(Bits.i(Bits.i(Bits.e)))))
//concat(b,c) -> Bits.o(Bits.i(Bits.i(Bits.o(Bits.o(Bits.i(Bits.i(Bits.e)))))))
//concat(c,d) -> Bits.o(Bits.o(Bits.i(Bits.i(Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))))))
concat(a: Bits, b: Bits): Bits
  case a{
    e: b //returns b ([....]b)    |1st a||a.pred + b| 
    o: Bits.o(concat(a.pred, b)) // 0[a.pred b]
    i: Bits.i(concat(a.pred, b)) // 1[a.pred b]
  }

// 07) Adds two Bits structures
//add(a,b) ->        Bits.i(Bits.o(Bits.o(Bits.i(Bits.e))))
//add(b,c) -> Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.e)))))
//add(c,d) -> Bits.i(Bits.i(Bits.o(Bits.i(Bits.i(Bits.e)))))
add(a: Bits, b: Bits): Bits 
  case a{
    e: b 
    o: case b{
      e: a 
      o: Bits.o(add(a.pred, b.pred))
      i: Bits.i(add(a.pred, b.pred))
    }
    i: case b{
      e: a
      o: Bits.i(add(a.pred, b.pred))
      i: Bits.o(inc(add(a.pred, b.pred)))
    }
  }

// o o:
//----------------------------------------------
//    1        2       4       8       16
//----------------------------------------------
//    0        0       0       1        0 -->  8   
//    0        0       0       1        0 -->  8  
//    0        0       0       0        1 --> 16 // 0001 + 0001 = 00001 (more one 0)

// o i:
//----------------------------------------------
//    1        2       4       8       16
//----------------------------------------------
//    0        0       0       1        0 -->  8
//    1        1       0       0        0 -->  3
//    1        1       0       1        0 --> 11 // 1st: 1 // last: 1 // remain 1
//----------------------------------------------
//    1        2       4       8       16
//----------------------------------------------
//    0        0       0       1        0 -->  8
//    1        0       1       0        0 -->  5
//    1        0       1       1        0 --> 13
//----------------------------------------------
//    1        2       4       8       16
//----------------------------------------------
//    0        0       0       1        0 -->  8
//    1        1       1       0        0 -->  7
//    1        1       1       1        0 --> 15
// case a
//  o: case b
// where's 1, remains 1
// where's 0, remains 0

// i i:
//----------------------------------------------
//    1        2       4       8       16
//----------------------------------------------
//    1        0       0       0        0 --> 1
//    1        0       0       0        0 --> 1
//    0        1       0       0        0 --> 2 --> 10 + 10 = 01
//----------------------------------------------
//    1        2       4       8       16
//----------------------------------------------
//    1        0       0       0        0 --> 1 
//    1        1       0       0        0 --> 3
//    0        0       1       0        0 --> 4 --> 10 + 11 = 001
//----------------------------------------------
//    1        2       4       8       16
//----------------------------------------------
//    1        1       0       0        0 --> 3 
//    1        0       1       0        0 --> 5
//    0        0       0       1        0 --> 8 --> 110 + 101 = 0001

// i o:
//----------------------------------------------
//    1        2       4       8       16
//----------------------------------------------
//    1        0       0       0        0 --> 1
//    0        1       0       0        0 --> 2
//    1        1       0       0        0 --> 3
//----------------------------------------------
//    1        2       4       8       16
//----------------------------------------------
//    1        1       0       0        0 --> 3
//    0        0       1       0        0 --> 4
//    1        1       1       0        0 --> 7

// i i = inc

// inc(b: Bits): Bits
//  case b{
//    e: Bits.e
//    o: Bits.i(b.pred)
//    i: Bits.o(inc(b.pred)) //same as dec but inverse
//  }

// 08) Returns Bits.i if only both bits are Bits.i
//and(a,b) -> Bits.o(Bits.i(Bits.e))
//and(b,c) -> Bits.o(Bits.o(Bits.i(Bits.e)))
//and(c,d) -> Bits.o(Bits.o(Bits.i(Bits.i(Bits.e))))
and(a: Bits, b: Bits): Bits
  case a{
    e: Bits.e
    o: case b{
      e: Bits.e
      o: Bits.o(and(a.pred, b.pred)) // false false = false
      i: Bits.o(and(a.pred, b.pred)) // true false = false
    }
    i: case b{
      e: Bits.e
      o: Bits.o(and(a.pred, b.pred)) // false false = false
      i: Bits.i(and(a.pred, b.pred)) // true true = true
    }
  }

// 09) Returns Bits.i if any of bits are Bits.i

//or(a,b) -> Bits.i(Bits.i(Bits.i(Bits.e)))
//or(b,c) -> Bits.o(Bits.i(Bits.i(Bits.i(Bits.e))))
//or(c,d) -> Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))
or(a: Bits, b: Bits): Bits
  case a{
    e: case b{
      o: Bits.o(and(Bits.e, b.pred)) // F F = F
      i: Bits.i(and(Bits.e, b.pred)) // F T = T
    }
    o: case b{
      e: Bits.o(and(a.pred, Bits.e)) // F F = F
      o: Bits.o(and(a.pred, b.pred)) // F F = F
      i: Bits.i(and(a.pred, b.pred)) // F T = T
    }
    i: case b{
      e: Bits.i(and(a.pred, Bits.e)) // T F = T
      o: Bits.i(and(a.pred, b.pred)) // T F = T 
      i: Bits.i(and(a.pred, b.pred)) // T T = T
    }
  }

// 10) Verifies if both Bit structures are equal

//eql(a,b) -> Bool.false
//eql(b,c) -> Bool.false
//eql(d,d) -> Bool.true
eql(a: Bits, b: Bits): Bool
  case a b{
    e e: Bool.true // if both empty, both equal, so true
    // no need to add more Bool.true, bc if both are equal, recursion until e e, returns true
    o e: Bool.false
    o o: Bits.o(eql(a.pred, b.pred)) // equal, need to analize the rest, recursion
    o i: Bool.false // alredy differents
    i e: Bool.false // alredy differents
    i o: Bool.false // alredy differents
    i i: Bits.i(eql(a.pred, b.pred)) // equal, need to analize the rest, recursion
  }

// 11) Reverses a Bits structure

reverse_go(b: Bits, acum: Bits): Bits
  case b{
    e: acum // returns acum
    o: reverse_go(b.pred, Bits.o(acum)) // take the first part and put it on acum and so on
    i: reverse_go(b.pred, Bits.i(acum)) 
  }
  
//  0101
//  1010
// start 0101
//    1)  101 acum     0e
//    2)   01 acum    10e
//    3)    1 acum   010e
//    4)      acum  1010e
//    5)    e acum  1010e

//reverse(a) -> Bits.i(Bits.i(Bits.e))
//reverse(b) -> Bits.i(Bits.i(Bits.o(Bits.e)))
//reverse(c) -> Bits.i(Bits.i(Bits.o(Bits.o(Bits.e))))
//reverse(d) -> Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))
reverse(b: Bits): Bits
  reverse_go(b, Bits.e)

// 12) Gets the length of the Bits structure

length_go(bs: Bits, acum: Nat): Nat
  case bs {
    e: acum // returns acum
    o: lenght_go(bs.pred, Nat.succ(acum))
    i: lenght_go(bs.pred, Nat.succ(acum))
  }

// 0110
// lenght_go: 110  acum: Nat.succ -> 2 - 110 (bs.pred)
// lenght_go:  10  acum: Nat.succ -> 3 -  10 (bs.pred)
// lenght_go:   0  acum: Nat.succ -> 4 -   0 (bs.pred)
// lenght_go:   e  returns acum = 4
// 0110

//length(a) -> Nat.succ(Nat.succ(Nat.zero))
//length(b) -> Nat.succ(Nat.succ(Nat.succ(Nat.zero)))
//length(c) -> Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero))))
//length(d) -> 4
length(bs: Bits): Nat  /// ??
  length_go(bs, 0)

// 13) Multiplies two Bits structures

mul_go(a: Bits, b: Bits, acum: Bits): Bits
  case a{
     e: acum
     o: case a.pred {
      e: acum
      o: mul_go(dec(a), b, add(acum, b))
      i: mul_go(dec(a), b, add(acum, b))
     }
  }

// o o:
//----------------------------------------------
//    1        2       4       8       16
//----------------------------------------------
//    0        0       0       1        0 --> 8
//    0        0       0       0        0 --> 2
//    0        0       0       0        1 --> 16
// i i:
//----------------------------------------------
//    1        2       4       8       16
//----------------------------------------------
//    1        1       0       0        0 --> 3
//    1        0       1       0        0 --> 5
//    0        0       0       1        0 --> 8
// 0 * b
// a * 0
// o * o
// o * i
// n * x = n + n + n + n + n + ... [x vezes]
// n + n + n + n ..., x -> acum
// mul(a: Nat, b: Nat): Nat
//  case a{
//    zero: Nat.zero //0 * b = 0
//    succ: case b{
//        zero: Nat.zero //a * 0 = 0
//        succ: add(a, mul(a, b.pred))
//    }          //a +   a * -1
//  }

//mul(a,b) -> Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.e)))))
//mul(b,c) -> Bits.o(Bits.o(Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.e)))))))
mul(a: Bits, b: Bits): Bits
  mul_go(a, b, Bits.e)



// 14) Drops a n Number of Bits starting from from the least significative bit

//drop(a) -> Bits.i(Bits.e)
//drop(b) -> Bits.i(Bits.i(Bits.e))
//drop(c) -> Bits.o(Bits.i(Bits.i(Bits.e)))
//drop(d) -> Bits.i(Bits.i(Bits.i(Bits.e)))
drop(n: Nat, bs: Bits): Bits // n number -> nat // returns structure bits after drop -> bits
  case n {
    zero: Bits.e 
    succ: case bs {
      e: Bits.e 
      o: Bits.o(drop(n.pred, bs.pred)) // drop 1st, until 0 drop...
      i: Bits.i(drop(n.pred, bs.pred))
    }
  }


// 15) Takes n Bits from the structure, starting from the least significative bit

//take(1, a) -> Bits.i(Bits.e)
//take(2, b) -> Bits.o(Bits.i(Bits.e))
//take(3, c) -> Bits.o(Bits.o(Bits.i(Bits.e)))
//take(4, d) -> Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))
take(n: Nat, bs: Bits): Bits // similar to drop
  case n {
    zero: Bits.e
    succ: case bs {
      e: Bits.e
      o: Bits.o(take(n.pred, bs.pred))
      i: Bits.i(take(n.pred, bs.pred))
    }
  }
